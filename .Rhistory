ibrary(neuralnet)
library(readxl)
df <- read_excel("Data for Project.xlsx")
train=df[1:20,]
test=df[21:30,]
testx=test[1:14]
View(testx)
testy=test[15:17]
View(testy)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=10,algorithm="rprop+",linear.output = FALSE)
library(neuralnet)
library(readxl)
df <- read_excel("Data for Project.xlsx")
train=df[1:20,]
test=df[21:30,]
testx=test[1:14]
View(testx)
testy=test[15:17]
View(testy)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=10,algorithm="rprop+",linear.output = FALSE)
print(compute(model,testx)$net.result)
new_val = df[31]
print(new_val)
new_val = df[31]
train=df[1:20,]
test=df[21:29,]
testx=test[1:14]
View(testx)
testy=test[15:17]
View(testy)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=10,algorithm="rprop+",linear.output = FALSE)
plot(model)
new_val = df[30]
new_val = df[30]
new_val = df[30]
new_val = df[30]
new_val = df[30,]
print(new_val)
predict(model, new_val)
predict(model, new_val)
train=df[1:20,]
test=df[21:30,]
testx=test[1:14]
View(testx)
testy=test[15:17]
View(testy)
predict(model, new_val, type = "class")
result1 <- predict(model, testx, type = "class")
result1 <- predict(model, testx, type = "class")$net.result
table(testx$class,result1)
table(testx,result1)
table(testx,result1)
print(result1)
table(testx,result1)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=20,algorithm="rprop+",linear.output = FALSE)
j = compute(model,testx)
j = compute(model,testx)
print(j$net.result)
View(testy)
print(j$net.result)
result1 <- predict(model, testx, type = "class")
print(result1)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=100,algorithm="rprop+",linear.output = FALSE)
table(testx,result1)
result1 <- predict(model, testx, type = "class")
print(result1)
table(testy,result1)
print(result1)
print(testy)
table(testy,result1)
accuracy(result1, testy)
result1 <- predict(model, testx)
print(result1)
table(test, apply(pred, 1, which.max))
table(test, apply(model, 1, which.max))
model = neuralnet((BL = '1')+(LWL = '1')+(HWL = '1')~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=100,algorithm="rprop+",linear.output = FALSE)
model = neuralnet((BL = '1')+(LWL = '1')+(HWL = '1')~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=100,algorithm="rprop+",linear.output = FALSE)
table(test$BL, apply(model, 1, which.max))
table(test$BL, apply(model, 1, which.max))
table(test, apply(model, 1, which.max))
print(result1)
model = neuralnet(BL+LWL+HWL~AF3+F7+F3+FC5+T7+P7+O1+O2+P8+T8+FC6+F4+F8+AF4,train,hidden=8,rep=50,algorithm="rprop+",linear.output = FALSE)
result1 <- predict(model, testx)
print(result1)
model$result.matrix
model$data
result1$BW
result1[1,1]
result1 <- predict(model, testx)
print(result1)
rowMaxs(result1, value = FALSE)
cbind(model, max=apply(model,1,max),
max.col.num =apply(model,1,which.max) ,
max.col.name= names(model)[apply(model,1,which.max)]  )
table(test, lapply(model, 1, which.max))
table(test, lapply(model, which.max))
table(test, lapply(testy, which.max))
table(test, lapply(testy, which.max))
table(test, lapply(test, which.max))
table(test, lapply(test, which.max))
table(testy, lapply(model, which.max))
table(testy, lapply(model, which.max))
table(test, lapply(model, which.max))
table(testy, lapply(model, which.max))
table(testy, lapply(model, which.max))
table(as.double(testy), lapply(model, which.max))
table(as.double(testy), lapply(model, which.max))
table(testy, as.integer(lapply(model, which.max))
table(testy, as.integer(lapply(model, which.max)))
table(testy, as.integer(lapply(model, which.max)))
table(testy, as.integer(lapply(model, which.max)))
table(testy,lapply(as.integer(model), which.max))
table(testy,lapply(as.integer(model), which.max))
table(testy,lapply(as.integer(model), which.max))
View(testy)
result1 <- predict(model, test)
print(result1)
result1 <- predict(model, testx)
print(result1)
